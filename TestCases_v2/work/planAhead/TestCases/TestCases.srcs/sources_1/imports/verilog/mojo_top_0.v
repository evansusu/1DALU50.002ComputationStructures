/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_xalu_alu;
  wire [1-1:0] M_xalu_v;
  wire [1-1:0] M_xalu_z;
  wire [1-1:0] M_xalu_n;
  reg [6-1:0] M_xalu_alufn;
  reg [16-1:0] M_xalu_a;
  reg [16-1:0] M_xalu_b;
  alu_1 xalu (
    .alufn(M_xalu_alufn),
    .a(M_xalu_a),
    .b(M_xalu_b),
    .alu(M_xalu_alu),
    .v(M_xalu_v),
    .z(M_xalu_z),
    .n(M_xalu_n)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_3 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_4 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [16-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_5 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [1-1:0] M_ctr_value;
  counter_6 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  
  
  localparam IDLE_state = 5'd0;
  localparam TESTADD1_state = 5'd1;
  localparam TESTADD2_state = 5'd2;
  localparam TESTSUB1_state = 5'd3;
  localparam TESTSUB2_state = 5'd4;
  localparam TESTSUB3_state = 5'd5;
  localparam TESTMUL1_state = 5'd6;
  localparam TESTMUL2_state = 5'd7;
  localparam TESTAND1_state = 5'd8;
  localparam TESTOR1_state = 5'd9;
  localparam TESTXOR1_state = 5'd10;
  localparam TESTSHL2_state = 5'd11;
  localparam TESTSHR2_state = 5'd12;
  localparam TESTSRA2_state = 5'd13;
  localparam TESTCMPEQ1_state = 5'd14;
  localparam TESTCMPEQ3_state = 5'd15;
  localparam TESTCMPLT1_state = 5'd16;
  localparam TESTCMPLT2_state = 5'd17;
  localparam TESTCMPLE3_state = 5'd18;
  localparam TESTROTSHI2_state = 5'd19;
  localparam FAIL_state = 5'd20;
  localparam SUCCESS_state = 5'd21;
  
  reg [4:0] M_state_d, M_state_q = IDLE_state;
  
  wire [1-1:0] M_sc_inc_state;
  stateCounter_7 sc (
    .clk(clk),
    .rst(rst),
    .inc_state(M_sc_inc_state)
  );
  
  always @* begin
    M_state_d = M_state_q;
    
    M_xalu_a = 16'h0000;
    M_xalu_b = 16'h0000;
    M_xalu_alufn = 6'h00;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_edge_detector_in = M_ctr_value;
    M_dec_ctr_inc = M_edge_detector_out;
    M_seg_values = 16'h0000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    io_led = io_dip;
    
    case (M_state_q)
      IDLE_state: begin
        if (io_button[1+0-:1]) begin
          M_state_d = TESTADD1_state;
        end
      end
      TESTADD1_state: begin
        M_xalu_a = 16'h2b7e;
        M_xalu_b = 16'hcc70;
        M_xalu_alufn = 6'h00;
        io_led[16+7+0-:1] = 1'h1;
        M_seg_values = 16'h0001;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'hf7ee && M_xalu_z == 1'h0 && M_xalu_v == 1'h0 && M_xalu_n == 1'h1 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTADD2_state;
        end else begin
          if ((M_xalu_alu != 16'hf7ee || M_xalu_z != 1'h0 || M_xalu_v != 1'h0 || M_xalu_n != 1'h1) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTADD2_state: begin
        M_xalu_a = 16'h93e9;
        M_xalu_b = 16'haa16;
        M_xalu_alufn = 6'h00;
        M_seg_values = 16'h0002;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'h3dff && M_xalu_z == 1'h0 && M_xalu_v == 1'h1 && M_xalu_n == 1'h0 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTSUB1_state;
        end else begin
          if ((M_xalu_alu != 16'h3dff || M_xalu_z != 1'h0 || M_xalu_v != 1'h1 || M_xalu_n != 1'h0) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTSUB1_state: begin
        M_xalu_a = 16'h2b7e;
        M_xalu_b = 16'hcc70;
        M_xalu_alufn = 6'h01;
        M_seg_values = 16'h0003;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'h5f0e && M_xalu_z == 1'h0 && M_xalu_v == 1'h0 && M_xalu_n == 1'h0 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTSUB2_state;
        end else begin
          if ((M_xalu_alu != 16'h5f0e || M_xalu_z != 1'h0 || M_xalu_v != 1'h0 || M_xalu_n != 1'h0) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTSUB2_state: begin
        M_xalu_a = 16'h93e9;
        M_xalu_b = 16'haa16;
        M_xalu_alufn = 6'h01;
        M_seg_values = 16'h0004;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'he9d3 && M_xalu_z == 1'h0 && M_xalu_v == 1'h0 && M_xalu_n == 1'h1 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTSUB3_state;
        end else begin
          if ((M_xalu_alu != 16'he9d3 || M_xalu_z != 1'h0 || M_xalu_v != 1'h0 || M_xalu_n != 1'h1) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTSUB3_state: begin
        M_xalu_a = 16'h5596;
        M_xalu_b = 16'h5596;
        M_xalu_alufn = 6'h01;
        M_seg_values = 16'h0005;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'h0000 && M_xalu_z == 1'h1 && M_xalu_v == 1'h0 && M_xalu_n == 1'h0 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTMUL1_state;
        end else begin
          if ((M_xalu_alu != 16'h0000 || M_xalu_z != 1'h1 || M_xalu_v != 1'h0 || M_xalu_n != 1'h0) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTMUL1_state: begin
        M_xalu_a = 16'h2b7e;
        M_xalu_b = 16'hcc70;
        M_xalu_alufn = 6'h02;
        M_seg_values = 16'h0006;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'h6f20 && M_xalu_z == 1'h0 && M_xalu_v == 1'h0 && M_xalu_n == 1'h0 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTMUL2_state;
        end else begin
          if ((M_xalu_alu != 16'h6f20 || M_xalu_z != 1'h0 || M_xalu_v != 1'h0 || M_xalu_n != 1'h0) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTMUL2_state: begin
        M_xalu_a = 16'h93e9;
        M_xalu_b = 16'haa16;
        M_xalu_alufn = 6'h02;
        M_seg_values = 16'h0007;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'h7006 && M_xalu_z == 1'h0 && M_xalu_v == 1'h1 && M_xalu_n == 1'h0 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTOR1_state;
        end else begin
          if ((M_xalu_alu != 16'h7006 || M_xalu_z != 1'h0 || M_xalu_v != 1'h1 || M_xalu_n != 1'h0) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTOR1_state: begin
        M_xalu_a = 16'h2b7e;
        M_xalu_b = 16'hcc70;
        M_xalu_alufn = 6'h1e;
        M_seg_values = 16'h0011;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'hef7e && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTXOR1_state;
        end else begin
          if ((M_xalu_alu != 16'hef7e) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTXOR1_state: begin
        M_xalu_a = 16'h2b7e;
        M_xalu_b = 16'hcc70;
        M_xalu_alufn = 6'h16;
        M_seg_values = 16'h0012;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'he70e && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTSHL2_state;
        end else begin
          if ((M_xalu_alu != 16'he70e) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTSHL2_state: begin
        M_xalu_a = 16'h93e9;
        M_xalu_b = 16'haa16;
        M_xalu_alufn = 6'h20;
        M_seg_values = 16'h0013;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'hfa40 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTSHR2_state;
        end else begin
          if ((M_xalu_alu != 16'hfa40) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTSHR2_state: begin
        M_xalu_a = 16'h93e9;
        M_xalu_b = 16'haa16;
        M_xalu_alufn = 6'h21;
        M_seg_values = 16'h0014;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'h024f && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTSRA2_state;
        end else begin
          if ((M_xalu_alu != 16'h024f) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTSRA2_state: begin
        M_xalu_a = 16'h93e9;
        M_xalu_b = 16'haa16;
        M_xalu_alufn = 6'h23;
        M_seg_values = 16'h0015;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'hfe4f && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTCMPEQ1_state;
        end else begin
          if ((M_xalu_alu != 16'hfe4f) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTCMPEQ1_state: begin
        M_xalu_a = 16'h2b7e;
        M_xalu_b = 16'hcc70;
        M_xalu_alufn = 6'h33;
        M_seg_values = 16'h0016;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'h0000 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTCMPEQ3_state;
        end else begin
          if ((M_xalu_alu != 16'h0000) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTCMPEQ3_state: begin
        M_xalu_a = 16'h5596;
        M_xalu_b = 16'h5596;
        M_xalu_alufn = 6'h33;
        M_seg_values = 16'h0017;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'h0001 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTCMPLT1_state;
        end else begin
          if ((M_xalu_alu != 16'h0001) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTCMPLT1_state: begin
        M_xalu_a = 16'h2b7e;
        M_xalu_b = 16'hcc70;
        M_xalu_alufn = 6'h35;
        M_seg_values = 16'h0018;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'h0000 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTCMPLT2_state;
        end else begin
          if ((M_xalu_alu != 16'h0000) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTCMPLT2_state: begin
        M_xalu_a = 16'h93e9;
        M_xalu_b = 16'haa16;
        M_xalu_alufn = 6'h35;
        M_seg_values = 16'h0019;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'h0001 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTCMPLE3_state;
        end else begin
          if ((M_xalu_alu != 16'h0001) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTCMPLE3_state: begin
        M_xalu_a = 16'h5596;
        M_xalu_b = 16'h5596;
        M_xalu_alufn = 6'h37;
        M_seg_values = 16'h0020;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'h0001 && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = TESTROTSHI2_state;
        end else begin
          if ((M_xalu_alu != 16'h0001) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTROTSHI2_state: begin
        M_xalu_a = 16'h93e9;
        M_xalu_b = 16'haa16;
        M_xalu_alufn = 6'h22;
        M_seg_values = 16'h0021;
        io_led[0+7-:8] = M_xalu_alu[0+7-:8];
        io_led[8+7-:8] = M_xalu_alu[8+7-:8];
        io_led[16+0+0-:1] = M_xalu_n;
        io_led[16+1+0-:1] = M_xalu_v;
        io_led[16+2+0-:1] = M_xalu_z;
        if (M_xalu_alu == 16'ha64f && M_sc_inc_state == 1'h1) begin
          io_led[0+7-:8] = M_xalu_alu[0+7-:8];
          io_led[8+7-:8] = M_xalu_alu[8+7-:8];
          M_state_d = SUCCESS_state;
        end else begin
          if ((M_xalu_alu != 16'ha64f) && M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      FAIL_state: begin
        if (M_sc_inc_state == 1'h1) begin
          M_seg_values = 16'habcd;
          io_led = 24'hffffff;
        end
        M_seg_values = 16'habcd;
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      SUCCESS_state: begin
        if (M_sc_inc_state == 1'h1) begin
          M_seg_values = 16'h5eff;
          io_led = 24'hffffff;
        end
        M_seg_values = 16'h5eff;
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_state_q <= M_state_d;
  end
  
endmodule
